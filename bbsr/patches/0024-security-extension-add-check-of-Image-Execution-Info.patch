From 08e3ea2ccc8c957db4bdaaa3950af54733b48d3a Mon Sep 17 00:00:00 2001
From: Joseph Hemann <Joseph.hemann@arm.com>
Date: Tue, 10 Aug 2021 15:46:01 -0500
Subject: [PATCH 24/37] security-extension: add check of Image Execution Info
 Table

  add checkpoint3 which verifies entries in Image Execution Info Table

Signed-off-by: Joseph Hemann <Joseph.hemann@arm.com>
Change-Id: Ib0cb6e467c03f6697e2d330b662d6357d0a2503c
---
 .../SecureBoot/BlackBoxTest/Guid.c            |  14 +
 .../SecureBoot/BlackBoxTest/Guid.h            |  35 +++
 .../BlackBoxTest/ImageLoadingBBTest.c         | 281 ++++++++++++++++++
 .../BlackBoxTest/SecureBootBBTestSupport.c    |  29 ++
 .../BlackBoxTest/SecureBootBBTestSupport.h    |   6 +
 5 files changed, 365 insertions(+)

diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.c
index dea89d60..e24cba6a 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.c
@@ -84,3 +84,17 @@ EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid008 = EFI_TEST_SECUREBOOTIMAG
 EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid009 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_009_GUID;
 
 EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid010 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_010_GUID;
+
+EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid011 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_011_GUID;
+
+EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid012 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_012_GUID;
+
+EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid013 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_013_GUID;
+
+EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid014 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_014_GUID;
+
+EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid015 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_015_GUID;
+
+EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid016 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_016_GUID;
+
+EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid017 = EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_017_GUID;
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.h b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.h
index 994ab8f4..f36e4984 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.h
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/Guid.h
@@ -159,3 +159,38 @@ extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid009;
 { 0x3b48371b, 0xc27e, 0x4c19, {0xb9, 0x99, 0x54, 0x53, 0x7e, 0xa4, 0xbf, 0xed }}
 
 extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid010;
+
+#define EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_011_GUID \
+{ 0xb3a670aa, 0x0fba, 0x48ca, {0x9d, 0x01, 0x0e, 0xe9, 0x70, 0x09, 0x65, 0xa9}}
+
+extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid011;
+
+#define EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_012_GUID \
+{ 0x00c3c2f2, 0x39d5, 0x4d35, {0xb7, 0xe7, 0x58, 0x7c, 0xa0, 0xf3, 0xcb, 0x75}}
+
+extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid012;
+
+#define EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_013_GUID \
+{ 0x55211c3f, 0xc438, 0x485a, {0xb1, 0x75, 0xb1, 0xef, 0x5d, 0x31, 0x41, 0xc7}}
+
+extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid013;
+
+#define EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_014_GUID \
+{ 0x32a28ae3, 0x9dcb, 0x4f3e, {0x86, 0x24, 0xe3, 0x3e, 0x50, 0xa9, 0x33, 0xe1}}
+
+extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid014;
+
+#define EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_015_GUID \
+{ 0x9031ee38, 0x3e1a, 0x44f2, {0x8e, 0x08, 0xf5, 0x2b, 0x52, 0xad, 0x1b, 0xd9}}
+
+extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid015;
+
+#define EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_016_GUID \
+{ 0x73aae70e, 0x7953, 0x4983, {0x89, 0x4a, 0x1e, 0x6a, 0xf2, 0x78, 0x25, 0xd7}}
+
+extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid016;
+
+#define EFI_TEST_SECUREBOOTIMAGELOADING_ASSERTION_017_GUID \
+{ 0x26d2b894, 0x37c3, 0x44d5, {0x8b, 0xf3, 0x6c, 0xa6, 0x01, 0x1a, 0xb4, 0x62}}
+
+extern EFI_GUID gSecureBootImageLoadingBbTestAssertionGuid017;
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/ImageLoadingBBTest.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/ImageLoadingBBTest.c
index 2c53ecf8..7a1ae46b 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/ImageLoadingBBTest.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/ImageLoadingBBTest.c
@@ -29,6 +29,32 @@ Abstract:
 
 #define KEK_ATTRIBUTES (EFI_VARIABLE_NON_VOLATILE | EFI_VARIABLE_BOOTSERVICE_ACCESS | \
                        EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS)
+
+typedef UINT32 EFI_IMAGE_EXECUTION_ACTION;
+#define EFI_IMAGE_EXECUTION_AUTHENTICATION 0x00000007
+#define EFI_IMAGE_EXECUTION_AUTH_UNTESTED 0x00000000
+#define EFI_IMAGE_EXECUTION_AUTH_SIG_FAILED 0x00000001
+#define EFI_IMAGE_EXECUTION_AUTH_SIG_PASSED 0x00000002
+#define EFI_IMAGE_EXECUTION_AUTH_SIG_NOT_FOUND 0x00000003
+#define EFI_IMAGE_EXECUTION_AUTH_SIG_FOUND 0x00000004
+#define EFI_IMAGE_EXECUTION_POLICY_FAILED 0x00000005
+#define EFI_IMAGE_EXECUTION_INITIALIZED 0x00000008
+
+typedef struct {
+ EFI_IMAGE_EXECUTION_ACTION Action;
+ UINT32 InfoSize;
+// CHAR16 Name[â€¦];
+// EFI_DEVICE_PATH_PROTOCOL DevicePath;
+// EFI_SIGNATURE_LIST Signature;
+} EFI_IMAGE_EXECUTION_INFO;
+
+
+//
+// globals variables
+//
+
+UINTN                    *NumberOfImages;
+EFI_IMAGE_EXECUTION_INFO *ImageExecutionInfo;
 
 //
 // Prototypes (external)
@@ -71,6 +97,21 @@ ImageLoadingTestCheckpoint2 (
   EFI_TEST_PROFILE_LIBRARY_PROTOCOL   *ProfileLib
   );
 
+EFI_STATUS
+VerifyImageEntry (
+  IN  CHAR16          *FileName,
+  IN  EFI_IMAGE_EXECUTION_ACTION Action
+  );
+
+EFI_STATUS
+ImageLoadingTestCheckpoint3 (
+  IN EFI_RUNTIME_SERVICES                 *RT,
+  IN EFI_STANDARD_TEST_LIBRARY_PROTOCOL   *StandardLib,
+  IN EFI_TEST_LOGGING_LIBRARY_PROTOCOL    *LoggingLib,
+  EFI_TEST_PROFILE_LIBRARY_PROTOCOL   *ProfileLib
+  );
+
+
 //
 // Functions
 //
@@ -141,6 +182,9 @@ ImageLoadingTest(
     SecureBootVariableCleanup (RT, StandardLib, LoggingLib, ProfileLib);
     return Status;
   }
+
+  ImageLoadingTestCheckpoint3 (RT, StandardLib, LoggingLib, ProfileLib);
+
   // Restore KEK, db, dbx
   Status = SecureBootVariableCleanup (RT, StandardLib, LoggingLib, ProfileLib);
   if (EFI_ERROR(Status)) {
@@ -917,3 +961,240 @@ ImageLoadingTestCheckpoint2 (
   return EFI_SUCCESS;
 
 }
+
+/**
+ *  Verify if image is in Image Execution Info table and has correct action code.
+ *  @param FileName Name of image.
+ *  @param Result Result of check.
+ *  @return EFI_SUCCESS The result of the check is found.
+ */
+EFI_STATUS
+VerifyImageEntry (
+  IN  CHAR16          *FileName,
+  IN  EFI_IMAGE_EXECUTION_ACTION Action
+  )
+{
+  EFI_STATUS          Status;
+  EFI_IMAGE_EXECUTION_INFO *InfoPtr;
+  VOID                     *ptr;
+  CHAR16                   *ImagePath;
+  CHAR16                   *ImageName;
+
+  // Move ptr to begin of Image Execution Table
+  ptr = ImageExecutionInfo;
+
+  // Iterate through Image Execution Info Table
+  for (int i = 0; i < *NumberOfImages; i++) {
+    InfoPtr = ptr;
+    ImagePath = ptr + sizeof(EFI_IMAGE_EXECUTION_INFO);
+    GetBaseName(ImagePath,&ImageName);
+
+    // Verify if this entries image name matches expected image name
+    if (SctStrCmp(FileName,ImageName) == 0) {
+
+      // Verify if this entries Action matches expected Action
+      if (InfoPtr->Action == Action) {
+         return EFI_SUCCESS;
+      } else {
+         return EFI_NOT_FOUND;
+      }
+    }
+    // advance pointer to next element in table
+    ptr += InfoPtr->InfoSize;
+  }
+
+  return EFI_NOT_FOUND;
+}
+
+
+/**
+ *  Verify image execution info table entries
+ *
+ *  @param StandardLib    A pointer to EFI_STANDARD_TEST_LIBRARY_PROTOCOL
+ *                        instance.
+ *  @param LoggingLib     A pointer to EFI_TEST_LOGGING_LIBRARY_PROTOCOL
+ *                        instance.
+ *  @param ProfileLib     A pointer to EFI_TEST_PROFILE_LIBRARY_PROTOCOL
+ *                        instance.
+ *  @return EFI_SUCCESS   Successfully.
+ *  @return Other value   Something failed.
+ */
+EFI_STATUS
+ImageLoadingTestCheckpoint3 (
+  IN EFI_RUNTIME_SERVICES                 *RT,
+  IN EFI_STANDARD_TEST_LIBRARY_PROTOCOL   *StandardLib,
+  IN EFI_TEST_LOGGING_LIBRARY_PROTOCOL    *LoggingLib,
+  EFI_TEST_PROFILE_LIBRARY_PROTOCOL   *ProfileLib
+  )
+{
+  EFI_STATUS               Status;
+  EFI_TEST_ASSERTION       Result;
+  CHAR16                   *FileName;
+  VOID                     *ptr;
+
+  //
+  // Trace ...
+  //
+  if (LoggingLib != NULL) {
+    LoggingLib->EnterFunction (
+                  LoggingLib,
+                  L"ImageLoadingTestCheckpoint3",
+                  L"UEFI spec, 32.4, 32.4.2"
+                  );
+  }
+
+  // Get pointer for Image Execution Info Table
+  Status = SctGetSystemConfigurationTable(&gEfiImageSecurityDatabaseGuid, &ptr);
+
+  if (Status != EFI_SUCCESS) {
+    StandardLib->RecordMessage (
+                     StandardLib,
+                     EFI_VERBOSE_LEVEL_DEFAULT,
+                     L"Secure Boot ImageLoadingTest: EFI Image Execution Info Table not found.\n"
+                     );
+     return EFI_NOT_FOUND;
+  }
+
+  // first element of table is number of images
+  NumberOfImages = ptr;
+
+  // advance pointer to the first IMAGE_EXECUTION_INFO entry
+  ptr += sizeof(NumberOfImages);
+
+  ImageExecutionInfo = ptr;
+
+  if (VerifyImageEntry(L"TestImage1.bin", EFI_IMAGE_EXECUTION_AUTH_SIG_NOT_FOUND)) {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  } else {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootImageLoadingBbTestAssertionGuid011,
+                 L"SecureBoot - Verify load of TestImage1.bin recorded in Image Execution Info Table.",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  if (VerifyImageEntry(L"TestImage2.bin", EFI_IMAGE_EXECUTION_AUTH_SIG_NOT_FOUND)) {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  } else {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootImageLoadingBbTestAssertionGuid012,
+                 L"SecureBoot - Verify load of TestImage2.bin recorded in Image Execution Info Table.",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  if (VerifyImageEntry(L"TestImage6.bin", EFI_IMAGE_EXECUTION_AUTH_SIG_FAILED)) {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  } else {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootImageLoadingBbTestAssertionGuid013,
+                 L"SecureBoot - Verify load of TestImage6.bin recorded in Image Execution Info Table.",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  if (VerifyImageEntry(L"TestImage7.bin", EFI_IMAGE_EXECUTION_AUTH_SIG_FAILED)) {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  } else {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootImageLoadingBbTestAssertionGuid014,
+                 L"SecureBoot - Verify load of TestImage7.bin recorded in Image Execution Info Table.",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  if (VerifyImageEntry(L"TestImage8.bin", EFI_IMAGE_EXECUTION_AUTH_SIG_FAILED)) {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  } else {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootImageLoadingBbTestAssertionGuid015,
+                 L"SecureBoot - Verify load of TestImage8.bin recorded in Image Execution Info Table.",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  if (VerifyImageEntry(L"TestImage9.bin", EFI_IMAGE_EXECUTION_AUTH_SIG_FAILED)) {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  } else {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootImageLoadingBbTestAssertionGuid016,
+                 L"SecureBoot - Verify load of TestImage9.bin recorded in Image Execution Info Table.",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  if (VerifyImageEntry(L"TestImage10.bin", EFI_IMAGE_EXECUTION_AUTH_SIG_FAILED)) {
+    Result = EFI_TEST_ASSERTION_FAILED;
+  } else {
+    Result = EFI_TEST_ASSERTION_PASSED;
+  }
+
+  StandardLib->RecordAssertion (
+                 StandardLib,
+                 Result,
+                 gSecureBootImageLoadingBbTestAssertionGuid017,
+                 L"SecureBoot - Verify load of TestImage10.bin recorded in Image Execution Info Table.",
+                 L"%a:%d:Status - %r",
+                 __FILE__,
+                 (UINTN)__LINE__,
+                 Status
+                 );
+
+  //
+  // Trace ...
+  //
+  if (LoggingLib != NULL) {
+    LoggingLib->ExitFunction (
+                  LoggingLib,
+                  L"ImageLoadingTestCheckpoint2",
+                  L"UEFI spec, 32.5, 32.4.2"
+                  );
+  }
+
+  //
+  // Done
+  //
+  return EFI_SUCCESS;
+}
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestSupport.c b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestSupport.c
index 52320e2d..b01c846f 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestSupport.c
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestSupport.c
@@ -224,6 +224,35 @@ OpenFileAndGetSize (
   return EFI_SUCCESS;
 }
 
+/**
+ *  Get BaseName from a given path string
+ *  @param FileName The full pathname.
+ *  @param BaseName Extracted Filename.
+ *  @return EFI_SUCCESS the BaseName was extracted from the full path.
+ */
+EFI_STATUS
+GetBaseName (
+  IN  CHAR16          *FileName,
+  OUT CHAR16          **BaseName
+  )
+{
+  EFI_STATUS          Status;
+  UINT32              StrLen;
+  CHAR16              *StrTail;
+
+  StrLen = SctStrLen(FileName);
+
+  for (StrTail = FileName + StrLen - 1; StrTail != FileName && *StrTail != L'\\'; StrTail--) {
+  }
+
+  if (StrTail == FileName) {
+    return EFI_NOT_FOUND;
+  }
+  *BaseName = StrTail+1;
+
+  return EFI_SUCCESS;
+}
+
 /**
  *  Restore the secure boot variables to initial values.
  *  The initial siglists are:
diff --git a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestSupport.h b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestSupport.h
index f4b7bcf5..7970b9c4 100644
--- a/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestSupport.h
+++ b/uefi-sct/SctPkg/TestCase/UEFI/EFI/RuntimeServices/SecureBoot/BlackBoxTest/SecureBootBBTestSupport.h
@@ -63,6 +63,12 @@ OpenFileAndGetSize (
   OUT UINT32          *FileSize
   );
 
+EFI_STATUS
+GetBaseName (
+  IN  CHAR16          *FileName,
+  OUT CHAR16          **BaseName
+  );
+
 EFI_STATUS
 SecureBootVariableCleanup (
   IN EFI_RUNTIME_SERVICES                 *RT,
-- 
2.17.1

